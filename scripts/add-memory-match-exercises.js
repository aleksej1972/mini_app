const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function addMemoryMatchExercises() {
  try {
    console.log('üéÆ Adding Memory Match exercises...')
    
    // Get all lessons
    const { data: lessons, error: lessonsError } = await supabase
      .from('lessons')
      .select('*')
      .order('level, order')
    
    if (lessonsError) {
      throw lessonsError
    }
    
    // Add memory match exercises for each lesson
    for (const lesson of lessons) {
      console.log(`\nüìù Adding memory match exercise for: ${lesson.title}`)
      
      // Check if memory-match exercise already exists
      const { data: existingExercise } = await supabase
        .from('exercises')
        .select('id')
        .eq('lesson_id', lesson.id)
        .eq('type', 'memory-match')
        .single()
      
      if (existingExercise) {
        console.log(`   ‚úÖ Memory match exercise already exists`)
        continue
      }
      
      // Get the highest order number for this lesson
      const { data: maxOrderExercise } = await supabase
        .from('exercises')
        .select('order')
        .eq('lesson_id', lesson.id)
        .order('order', { ascending: false })
        .limit(1)
        .single()
      
      const nextOrder = maxOrderExercise ? maxOrderExercise.order + 1 : 1
      
      // Create memory match exercise based on lesson level
      const exercise = createMemoryMatchExercise(lesson, nextOrder)
      
      const { error: insertError } = await supabase
        .from('exercises')
        .insert(exercise)
      
      if (insertError) {
        console.log(`   ‚ùå Error: ${insertError.message}`)
      } else {
        console.log(`   ‚úÖ Added memory match exercise`)
      }
    }
    
    console.log('\nüéâ Memory match exercises added successfully!')
    
  } catch (error) {
    console.error('‚ùå Failed to add memory match exercises:', error.message)
  }
}

function createMemoryMatchExercise(lesson, order) {
  const wordPairsByLevel = {
    'A1': [
      { english: "Hello", russian: "–ü—Ä–∏–≤–µ—Ç" },
      { english: "Good morning", russian: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ" },
      { english: "Thank you", russian: "–°–ø–∞—Å–∏–±–æ" },
      { english: "Please", russian: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞" },
      { english: "Goodbye", russian: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è" },
      { english: "Yes", russian: "–î–∞" }
    ],
    'A2': [
      { english: "Family", russian: "–°–µ–º—å—è" },
      { english: "House", russian: "–î–æ–º" },
      { english: "School", russian: "–®–∫–æ–ª–∞" },
      { english: "Friend", russian: "–î—Ä—É–≥" },
      { english: "Work", russian: "–†–∞–±–æ—Ç–∞" },
      { english: "Food", russian: "–ï–¥–∞" }
    ],
    'B1': [
      { english: "Experience", russian: "–û–ø—ã—Ç" },
      { english: "Important", russian: "–í–∞–∂–Ω—ã–π" },
      { english: "Difficult", russian: "–¢—Ä—É–¥–Ω—ã–π" },
      { english: "Interesting", russian: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π" },
      { english: "Beautiful", russian: "–ö—Ä–∞—Å–∏–≤—ã–π" },
      { english: "Successful", russian: "–£—Å–ø–µ—à–Ω—ã–π" }
    ],
    'B2': [
      { english: "Achievement", russian: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ" },
      { english: "Opportunity", russian: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å" },
      { english: "Challenge", russian: "–í—ã–∑–æ–≤" },
      { english: "Development", russian: "–†–∞–∑–≤–∏—Ç–∏–µ" },
      { english: "Environment", russian: "–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞" },
      { english: "Technology", russian: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è" }
    ],
    'C1': [
      { english: "Sophisticated", russian: "–ò–∑–æ—â—Ä–µ–Ω–Ω—ã–π" },
      { english: "Comprehensive", russian: "–í—Å–µ–æ–±—ä–µ–º–ª—é—â–∏–π" },
      { english: "Substantial", russian: "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" },
      { english: "Inevitable", russian: "–ù–µ–∏–∑–±–µ–∂–Ω—ã–π" },
      { english: "Phenomenon", russian: "–Ø–≤–ª–µ–Ω–∏–µ" },
      { english: "Controversy", russian: "–°–ø–æ—Ä" }
    ],
    'C2': [
      { english: "Unprecedented", russian: "–ë–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–π" },
      { english: "Quintessential", russian: "–¢–∏–ø–∏—á–Ω—ã–π" },
      { english: "Ubiquitous", russian: "–ü–æ–≤—Å–µ–º–µ—Å—Ç–Ω—ã–π" },
      { english: "Meticulous", russian: "–î–æ—Ç–æ—à–Ω—ã–π" },
      { english: "Paradigm", russian: "–ü–∞—Ä–∞–¥–∏–≥–º–∞" },
      { english: "Nuance", russian: "–ù—é–∞–Ω—Å" }
    ]
  }

  const wordPairs = wordPairsByLevel[lesson.level] || wordPairsByLevel['A1']

  return {
    lesson_id: lesson.id,
    type: 'memory-match',
    content_json: {
      word_pairs: wordPairs
    },
    xp_reward: 20,
    order: order
  }
}

// Run the script
addMemoryMatchExercises()
